#!/usr/bin/env python3

import sys
import yaml

def config_logs(*flows, service):
	if not any(map(lambda flow: input_yaml[flow], flows)):
		service['logging'] = {'driver': 'none'}

input_yaml_file = open("./scripts/system-config.yaml")
input_yaml = yaml.load(input_yaml_file, Loader=yaml.FullLoader)

#### CONFIG VARIABLES
log_level = input_yaml['log_level']
log_bulk_rate = input_yaml['log_bulk_rate']
reviews_streaming = input_yaml['reviews_streaming']
common_pool_size = input_yaml['common_pool_size']
reviews_bulk_size = input_yaml['reviews_bulk_size']
business_bulk_size = input_yaml['business_bulk_size']
funbizagg_bulk_size = input_yaml['funbizagg_bulk_size']
funcitjoin_bulk_size = input_yaml['funcitjoin_bulk_size']
funcitagg_bulk_size = input_yaml['funcitagg_bulk_size']
useragg_bulk_size = input_yaml['useragg_bulk_size']
starsagg_bulk_size = input_yaml['starsagg_bulk_size']
funniest_cities_logging = input_yaml['funniest_cities_logging']
weekday_histogram_logging = input_yaml['weekday_histogram_logging']
best_users_logging = input_yaml['best_users_logging']
bot_users_logging = input_yaml['bot_users_logging']
top_users_logging = input_yaml['top_users_logging']
users_min_reviews = input_yaml['users_min_reviews']
bots_min_reviews = input_yaml['bots_min_reviews']
funniest_cities_top_size = input_yaml['funniest_cities_top_size']
citbiz_mappers = input_yaml['citbiz_mappers']
funbiz_mappers = input_yaml['funbiz_mappers']
funbiz_filters = input_yaml['funbiz_filters']
funbiz_aggregators = input_yaml['funbiz_aggregators']
funcit_joiners = input_yaml['funcit_joiners']
funcit_tops = input_yaml['funcit_tops']
weekday_mappers = input_yaml['weekday_mappers']
weekday_aggregators = input_yaml['weekday_aggregators']
user_mappers = input_yaml['user_mappers']
user_aggregators = input_yaml['user_aggregators']
user_filters = input_yaml['user_filters']
stars_mappers = input_yaml['stars_mappers']
stars_filters = input_yaml['stars_filters']
stars_aggregators = input_yaml['stars_aggregators']
bestuser_joiners = input_yaml['bestuser_joiners']
hash_mappers = input_yaml['hash_mappers']
bots_aggregators = input_yaml['bots_aggregators']

business_data = '/data/business.json'	
reviews_inputs = 2 if reviews_streaming else 1

file = {}

#### VERSION
file['version'] = '3'

#### SERVICES
file['services'] = {}
services = []

# Services dependencies
SINK_DEPS = ['rabbitmq']
HISTOPRE_DEPS = ['sink']
TOPUSERPRE_DEPS = ['sink']
FUNCITPRE_DEPS = ['sink']
BESTUSERPRE_DEPS = ['sink']
BOTUSERPRE_DEPS = ['sink']
FUNCITJOIN_DEPS = []
BESTUSERJOIN_DEPS = []
BOTUSERJOIN_DEPS = []
FUNBIZAGG_DEPS = []
USERAGG_DEPS = []
BOTAGG_DEPS = []
WEEKDAYAGG_DEPS = []
STARSAGG_DEPS = []
FUNBIZFIL_DEPS = []
FUNCITTOP_DEPS = []
USERFIL_DEPS = []
STARSFIL_DEPS = []
DISHASHFIL_DEPS = []
BOTUSERFIL_DEPS = []
USERMAP_DEPS = []
STARSMAP_DEPS = []
HASHMAP_DEPS = []
FUNBIZMAP_DEPS = []
CITBIZMAP_DEPS = []
WEEKDAYMAP_DEPS = []
BIZSCA_DEPS = []
RVWSCA_DEPS = []

## RabbitMQ
file['services']['rabbitmq'] = {
	'container_name': f'rabbitmq',
	'image': 'rabbitmq:custom',
	'ports': ['15672:15672', '5672:5672'],
	'networks': ['testing_net'],
	'logging': {'driver': 'none'},
	'healthcheck': {
		'test': '''["CMD", "curl", "-f", "http://rabbitmq:156722]''',
		'interval': '10s',
		'timeout': '5s',
		'retries': '10'
	}
}

## Sink
service = 'sink'
services += [service]
file['services'][service] = {
	'container_name': 'sink',
	'image': 'sink:latest',
	'entrypoint': '/sink',
	'restart': 'on-failure',
	'environment': ['SINK_RABBITMQ_IP=rabbitmq', 'SINK_RABBITMQ_PORT=5672', f'SINK_LOG_LEVEL={log_level}'],
	'links': ['rabbitmq'],
	'depends_on': list(SINK_DEPS),
	'networks': ['testing_net'],
}

## Funniest Cities flow
service = 'top_funniest_cities_prettier'
services += [service]
FUNCITTOP_DEPS += [service]
file['services'][service] = {
	'container_name': 'top_funniest_cities_prettier',
	'image': 'top_funniest_cities_prettier:latest',
	'entrypoint': '/prettier',
	'restart': 'on-failure',
	'environment': [f'FUNCITPRE_WORKERS_POOL={common_pool_size}', 'FUNCITPRE_RABBITMQ_IP=rabbitmq', 'FUNCITPRE_RABBITMQ_PORT=5672', f'FUNCITPRE_TOP_SIZE={funniest_cities_top_size}', f'FUNCITPRE_FUNCIT_TOPS={funcit_tops}', f'FUNCITPRE_LOG_LEVEL={log_level}'],
	'links': ['rabbitmq'],
	'depends_on': list(FUNCITPRE_DEPS),
	'networks': ['testing_net'],
}
config_logs('funniest_cities_logging', service=file['services']['top_funniest_cities_prettier'])

for idx in range(0, funcit_tops):
	container_name = f'funcit_top{idx}'
	services += [container_name]
	FUNCITJOIN_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'funcit_top:latest',
		'entrypoint': '/aggregator',
		'restart': 'on-failure',
		'environment': [f'FUNCITTOP_WORKERS_POOL={common_pool_size}', f'FUNCITTOP_LOG_BULK_RATE={log_bulk_rate}', f'FUNCITTOP_INSTANCE={idx}', 'FUNCITTOP_RABBITMQ_IP=rabbitmq', 'FUNCITTOP_RABBITMQ_PORT=5672', f'FUNCITTOP_TOP_SIZE={funniest_cities_top_size}', f'FUNCITTOP_FUNCIT_JOINERS={funcit_joiners}', f'FUNCITTOP_LOG_LEVEL={log_level}', f'FUNCITTOP_INPUT_TOPIC={idx}'],
		'links': ['rabbitmq'],
		'depends_on': list(FUNCITTOP_DEPS),
		'networks': ['testing_net'],
	}
	config_logs('funniest_cities_logging', service=file['services'][container_name])

for idx in range(0, funcit_joiners):
	container_name = f'funcit_joiner{idx}'
	services += [container_name]
	CITBIZMAP_DEPS += [container_name]
	FUNBIZAGG_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'funcit_joiner:latest',
		'entrypoint': '/joiner',
		'restart': 'on-failure',
		'environment': [f'FUNCITJOIN_WORKERS_POOL={common_pool_size}', f'FUNCITJOIN_LOG_BULK_RATE={log_bulk_rate}', f'FUNCITJOIN_INSTANCE={idx}', 'FUNCITJOIN_RABBITMQ_IP=rabbitmq', 'FUNCITJOIN_RABBITMQ_PORT=5672', f'FUNCITJOIN_FUNBIZ_AGGREGATORS={funbiz_aggregators}', f'FUNCITJOIN_CITBIZ_MAPPERS={citbiz_mappers}', f'FUNCITJOIN_FUNCIT_TOPS={funcit_tops}', f'FUNCITJOIN_INPUT_TOPIC={idx}', f'FUNCITJOIN_OUTPUT_BULK_SIZE={funcitjoin_bulk_size}', f'FUNCITJOIN_LOG_LEVEL={log_level}'],
		'links': ['rabbitmq'],
		'depends_on': list(FUNCITJOIN_DEPS),
		'networks': ['testing_net']
	}
	config_logs('funniest_cities_logging', service=file['services'][container_name])

for idx in range(0, citbiz_mappers):
	container_name = f'citbiz_mapper{idx}'
	services += [container_name]
	BIZSCA_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'citbiz_mapper:latest',
		'entrypoint': '/mapper',
		'restart': 'on-failure',
		'environment': [f'CITBIZMAP_WORKERS_POOL={common_pool_size}', f'CITBIZMAP_LOG_BULK_RATE={log_bulk_rate}', f'CITBIZMAP_INSTANCE={idx}', 'CITBIZMAP_RABBITMQ_IP=rabbitmq', 'CITBIZMAP_RABBITMQ_PORT=5672', 'CITBIZMAP_BUSINESSES_INPUTS=1', f'CITBIZMAP_FUNCIT_JOINERS={funcit_joiners}', f'CITBIZMAP_LOG_LEVEL={log_level}'],
		'links': ['rabbitmq'],
		'depends_on': list(CITBIZMAP_DEPS),
		'networks': ['testing_net']
	}
	config_logs('funniest_cities_logging', service=file['services'][container_name])

service = 'biz_scatter'
services += [service]
file['services'][service] = {
	'container_name': 'biz_scatter',
	'image': 'biz_scatter:latest',
	'entrypoint': '/scatter',
	'restart': 'on-failure',
	'environment': [f'BIZSCA_WORKERS_POOL={common_pool_size}', f'BIZSCA_LOG_BULK_RATE={log_bulk_rate}', 'BIZSCA_INSTANCE=0', f'BIZSCA_BUSINESS_DATA={business_data}', 'BIZSCA_RABBITMQ_IP=rabbitmq', 'BIZSCA_RABBITMQ_PORT=5672', f'BIZSCA_BULK_SIZE={business_bulk_size}', f'BIZSCA_CITBIZ_MAPPERS={citbiz_mappers}', f'BIZSCA_LOG_LEVEL={log_level}'],
	'links': ['rabbitmq'],
	'depends_on': list(BIZSCA_DEPS),
	'networks': ['testing_net'],
	'volumes': ['business_dataset:/data']
}
config_logs('funniest_cities_logging', service=file['services']['biz_scatter'])

for idx in range(0, funbiz_aggregators):
	container_name = f'funbiz_aggregator{idx}'
	services += [container_name]
	FUNBIZFIL_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'funbiz_aggregator:latest',
		'entrypoint': '/aggregator',
		'restart': 'on-failure',
		'environment': [f'FUNBIZAGG_WORKERS_POOL={common_pool_size}', f'FUNBIZAGG_LOG_BULK_RATE={log_bulk_rate}', f'FUNBIZAGG_INSTANCE={idx}', 'FUNBIZAGG_RABBITMQ_IP=rabbitmq', 'FUNBIZAGG_RABBITMQ_PORT=5672', f'FUNBIZAGG_FUNBIZ_FILTERS={funbiz_filters}', f'FUNBIZAGG_FUNCIT_JOINERS={funcit_joiners}', f'FUNBIZAGG_INPUT_TOPIC={idx}', f'FUNBIZAGG_OUTPUT_BULK_SIZE={funbizagg_bulk_size}', f'FUNBIZAGG_LOG_LEVEL={log_level}'],
		'links': ['rabbitmq'],
		'depends_on': list(FUNBIZAGG_DEPS),
		'networks': ['testing_net']
	}
	config_logs('funniest_cities_logging', service=file['services'][container_name])

for idx in range(0, funbiz_filters):
	container_name = f'funbiz_filter{idx}'
	services += [container_name]
	FUNBIZMAP_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'funbiz_filter:latest',
		'entrypoint': '/filter',
		'restart': 'on-failure',
		'environment': [f'FUNBIZFIL_WORKERS_POOL={common_pool_size}', f'FUNBIZFIL_LOG_BULK_RATE={log_bulk_rate}', f'FUNBIZFIL_INSTANCE={idx}', 'FUNBIZFIL_RABBITMQ_IP=rabbitmq', 'FUNBIZFIL_RABBITMQ_PORT=5672', f'FUNBIZFIL_FUNBIZ_MAPPERS={funbiz_mappers}', f'FUNBIZFIL_FUNBIZ_AGGREGATORS={funbiz_aggregators}', f'FUNBIZFIL_LOG_LEVEL={log_level}'],
		'links': ['rabbitmq'],
		'depends_on': list(FUNBIZFIL_DEPS),
		'networks': ['testing_net']
	}
	config_logs('funniest_cities_logging', service=file['services'][container_name])

for idx in range(0, funbiz_mappers):
	container_name = f'funbiz_mapper{idx}'
	services += [container_name]
	RVWSCA_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'funbiz_mapper:latest',
		'entrypoint': '/mapper',
		'restart': 'on-failure',
		'environment': [f'FUNBIZMAP_WORKERS_POOL={common_pool_size}', f'FUNBIZMAP_LOG_BULK_RATE={log_bulk_rate}', f'FUNBIZMAP_INSTANCE={idx}', 'FUNBIZMAP_RABBITMQ_IP=rabbitmq', 'FUNBIZMAP_RABBITMQ_PORT=5672', f'FUNBIZMAP_REVIEWS_INPUTS={reviews_inputs}', f'FUNBIZMAP_FUNBIZ_FILTERS={funbiz_filters}', f'FUNBIZMAP_LOG_LEVEL={log_level}'],
		'links': ['rabbitmq'],
		'depends_on': list(FUNBIZMAP_DEPS),
		'networks': ['testing_net']
	}
	config_logs('funniest_cities_logging', service=file['services'][container_name])

## Weekday Histogram flow.
service = 'weekday_histogram_prettier'
services += [service]
WEEKDAYAGG_DEPS += [service]
file['services'][service] = {
	'container_name': 'weekday_histogram_prettier',
	'image': 'weekday_histogram_prettier:latest',
	'entrypoint': '/prettier',
	'restart': 'on-failure',
	'environment': [f'HISTOPRE_WORKERS_POOL={common_pool_size}', 'HISTOPRE_INSTANCE=0', 'HISTOPRE_RABBITMQ_IP=rabbitmq', 'HISTOPRE_RABBITMQ_PORT=5672', f'HISTOPRE_WEEKDAY_AGGREGATORS={weekday_aggregators}', f'HISTOPRE_LOG_LEVEL={log_level}'],
	'links': ['rabbitmq'],
	'depends_on': list(HISTOPRE_DEPS),
	'networks': ['testing_net']
}
config_logs('weekday_histogram_logging', service=file['services']['weekday_histogram_prettier'])

for idx in range(0, weekday_aggregators):
	container_name = f'weekday_aggregator{idx}'
	services += [container_name]
	WEEKDAYMAP_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'weekday_aggregator:latest',
		'entrypoint': '/aggregator',
		'restart': 'on-failure',
		'environment': [f'WEEKDAYAGG_WORKERS_POOL={common_pool_size}', f'WEEKDAYAGG_LOG_BULK_RATE={log_bulk_rate}', f'WEEKDAYAGG_INSTANCE={idx}', 'WEEKDAYAGG_RABBITMQ_IP=rabbitmq', 'WEEKDAYAGG_RABBITMQ_PORT=5672', f'WEEKDAYAGG_INPUT_TOPIC={idx}', f'WEEKDAYAGG_WEEKDAY_MAPPERS={weekday_mappers}', f'WEEKDAYAGG_LOG_LEVEL={log_level}'],
		'links': ['rabbitmq'],
		'depends_on': list(WEEKDAYAGG_DEPS),
		'networks': ['testing_net']
	}
	config_logs('weekday_histogram_logging', service=file['services'][container_name])

for idx in range(0, weekday_mappers):
	container_name = f'weekday_mapper{idx}'
	services += [container_name]
	RVWSCA_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'weekday_mapper:latest',
		'entrypoint': '/mapper',
		'restart': 'on-failure',
		'environment': [f'WEEKDAYMAP_WORKERS_POOL={common_pool_size}', f'WEEKDAYMAP_LOG_BULK_RATE={log_bulk_rate}', f'WEEKDAYMAP_INSTANCE={idx}', 'WEEKDAYMAP_RABBITMQ_IP=rabbitmq', 'WEEKDAYMAP_RABBITMQ_PORT=5672', f'WEEKDAYMAP_REVIEWS_INPUTS={reviews_inputs}', f'WEEKDAYMAP_WEEKDAY_AGGREGATORS={weekday_aggregators}', f'WEEKDAYMAP_LOG_LEVEL={log_level}'],
		'links': ['rabbitmq'],
		'depends_on': list(WEEKDAYMAP_DEPS),
		'networks': ['testing_net']
	}
	config_logs('weekday_histogram_logging', service=file['services'][container_name])

## Best Users flow.
service = 'best_users_prettier'
services += [service]
BESTUSERJOIN_DEPS += [service]
file['services'][service] = {
	'container_name': 'best_users_prettier',
	'image': 'best_users_prettier:latest',
	'entrypoint': '/prettier',
	'restart': 'on-failure',
	'environment': [f'BESTUSERPRE_WORKERS_POOL={common_pool_size}', 'BESTUSERPRE_RABBITMQ_IP=rabbitmq', 'BESTUSERPRE_RABBITMQ_PORT=5672', f'BESTUSERPRE_MIN_REVIEWS={users_min_reviews}', f'BESTUSERPRE_BESTUSER_JOINERS={bestuser_joiners}', f'BESTUSERPRE_LOG_LEVEL={log_level}'],
	'links': ['rabbitmq'],
	'depends_on': list(BESTUSERPRE_DEPS),
	'networks': ['testing_net']
}
config_logs('best_users_logging', service=file['services']['best_users_prettier'])

for idx in range(0, bestuser_joiners):
	container_name = f'bestuser_joiner{idx}'
	services += [container_name]
	USERFIL_DEPS += [container_name]
	STARSAGG_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'bestuser_joiner:latest',
		'entrypoint': '/joiner',
		'restart': 'on-failure',
		'environment': [f'BESTUSERJOIN_WORKERS_POOL={common_pool_size}', f'BESTUSERJOIN_LOG_BULK_RATE={log_bulk_rate}', f'BESTUSERJOIN_INSTANCE={idx}', 'BESTUSERJOIN_RABBITMQ_IP=rabbitmq', 'BESTUSERJOIN_RABBITMQ_PORT=5672', f'BESTUSERJOIN_INPUT_TOPIC={idx}', f'BESTUSERJOIN_STARS_AGGREGATORS={stars_aggregators}', f'BESTUSERJOIN_USER_FILTERS={user_filters}', f'BESTUSERJOIN_LOG_LEVEL={log_level}'],
		'links': ['rabbitmq'],
		'depends_on': list(BESTUSERJOIN_DEPS),
		'networks': ['testing_net']
	}
	config_logs('best_users_logging', service=file['services'][container_name])

for idx in range(0, stars_aggregators):
	container_name = f'stars_aggregator{idx}'
	services += [container_name]
	STARSFIL_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'stars_aggregator:latest',
		'entrypoint': '/aggregator',
		'restart': 'on-failure',
		'environment': [f'STARSAGG_WORKERS_POOL={common_pool_size}', f'STARSAGG_LOG_BULK_RATE={log_bulk_rate}', f'STARSAGG_INSTANCE={idx}', 'STARSAGG_RABBITMQ_IP=rabbitmq', 'STARSAGG_RABBITMQ_PORT=5672', f'STARSAGG_INPUT_TOPIC={idx}', f'STARSAGG_STARS_FILTERS={stars_filters}', f'STARSAGG_STARS_JOINERS={bestuser_joiners}', f'STARSAGG_OUTPUT_BULK_SIZE={starsagg_bulk_size}', f'STARSAGG_LOG_LEVEL={log_level}'],
		'links': ['rabbitmq'],
		'depends_on': list(STARSAGG_DEPS),
		'networks': ['testing_net']
	}
	config_logs('best_users_logging', service=file['services'][container_name])

for idx in range(0, stars_filters):
	container_name = f'stars_filter{idx}'
	services += [container_name]
	STARSMAP_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'stars_filter:latest',
		'entrypoint': '/filter',
		'restart': 'on-failure',
		'environment': [f'STARSFIL_WORKERS_POOL={common_pool_size}', f'STARSFIL_LOG_BULK_RATE={log_bulk_rate}', f'STARSFIL_INSTANCE={idx}', 'STARSFIL_RABBITMQ_IP=rabbitmq', 'STARSFIL_RABBITMQ_PORT=5672', f'STARSFIL_STARS_MAPPERS={stars_mappers}', f'STARSFIL_STARS_AGGREGATORS={stars_aggregators}', f'STARSFIL_LOG_LEVEL={log_level}'],
		'links': ['rabbitmq'],
		'depends_on': list(STARSFIL_DEPS),
		'networks': ['testing_net']
	}
	config_logs('best_users_logging', service=file['services'][container_name])

for idx in range(0, stars_mappers):
	container_name = f'stars_mapper{idx}'
	services += [container_name]
	RVWSCA_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'stars_mapper:latest',
		'entrypoint': '/mapper',
		'restart': 'on-failure',
		'environment': [f'STARSMAP_WORKERS_POOL={common_pool_size}', f'STARSMAP_LOG_BULK_RATE={log_bulk_rate}', f'STARSMAP_INSTANCE={idx}', 'STARSMAP_RABBITMQ_IP=rabbitmq', 'STARSMAP_RABBITMQ_PORT=5672', f'STARSMAP_REVIEWS_INPUTS={reviews_inputs}', f'STARSMAP_STARS_FILTERS={stars_filters}', f'STARSMAP_LOG_LEVEL={log_level}'],
		'links': ['rabbitmq'],
		'depends_on': list(STARSMAP_DEPS),
		'networks': ['testing_net']
	}
	config_logs('best_users_logging', service=file['services'][container_name])

# Bot Users flow.
service = 'bot_users_prettier'
services += [service]
BOTUSERJOIN_DEPS += [service]
file['services'][service] = {
	'container_name': 'bot_users_prettier',
	'image': 'bot_users_prettier:latest',
	'entrypoint': '/prettier',
	'restart': 'on-failure',
	'environment': [f'BOTUSERPRE_WORKERS_POOL={common_pool_size}', 'BOTUSERPRE_RABBITMQ_IP=rabbitmq', 'BOTUSERPRE_RABBITMQ_PORT=5672', f'BOTUSERPRE_MIN_REVIEWS={bots_min_reviews}', f'BOTUSERPRE_BOTS_AGGREGATORS={bots_aggregators}', f'BOTUSERPRE_LOG_LEVEL={log_level}'],
	'links': ['rabbitmq'],
	'depends_on': list(BOTUSERPRE_DEPS),
	'networks': ['testing_net']
}
config_logs('bot_users_logging', service=file['services']['bot_users_prettier'])

for idx in range(0, bots_aggregators):
	container_name = f'bots_aggregator{idx}'
	services += [container_name]
	HASHMAP_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'bots_aggregator:latest',
		'entrypoint': '/aggregator',
		'restart': 'on-failure',
		'environment': [f'BOTAGG_WORKERS_POOL={common_pool_size}', f'BOTAGG_LOG_BULK_RATE={log_bulk_rate}', f'BOTAGG_INSTANCE={idx}', 'BOTAGG_RABBITMQ_IP=rabbitmq', 'BOTAGG_RABBITMQ_PORT=5672', f'BOTAGG_INPUT_TOPIC={idx}', f'BOTAGG_HASH_MAPPERS={hash_mappers}', f'BOTAGG_MIN_REVIEWS={bots_min_reviews}', f'BOTAGG_LOG_LEVEL={log_level}'],
		'links': ['rabbitmq'],
		'depends_on': list(BOTAGG_DEPS),
		'networks': ['testing_net']
	}
	config_logs('bot_users_logging', service=file['services'][container_name])

for idx in range(0, hash_mappers):
	container_name = f'hash_mapper{idx}'
	services += [container_name]
	RVWSCA_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'hash_mapper:latest',
		'entrypoint': '/mapper',
		'restart': 'on-failure',
		'environment': [f'HASHMAP_WORKERS_POOL={common_pool_size}', f'HASHMAP_LOG_BULK_RATE={log_bulk_rate}', f'HASHMAP_INSTANCE={idx}', 'HASHMAP_RABBITMQ_IP=rabbitmq', 'HASHMAP_RABBITMQ_PORT=5672', f'HASHMAP_REVIEWS_INPUTS={reviews_inputs}', f'HASHMAP_BOTS_AGGREGATORS={bots_aggregators}', f'HASHMAP_LOG_LEVEL={log_level}'],
		'links': ['rabbitmq'],
		'depends_on': list(HASHMAP_DEPS),
		'networks': ['testing_net']
	}
	config_logs('bot_users_logging', service=file['services'][container_name])

## Top Users flow.
service = 'top_users_prettier'
services += [service]
USERFIL_DEPS += [service]
file['services']['top_users_prettier'] = {
	'container_name': 'top_users_prettier',
	'image': 'top_users_prettier:latest',
	'entrypoint': '/prettier',
	'restart': 'on-failure',
	'environment': [f'TOPUSERPRE_WORKERS_POOL={common_pool_size}', f'TOPUSERPRE_LOG_BULK_RATE={log_bulk_rate}', 'TOPUSERPRE_RABBITMQ_IP=rabbitmq', 'TOPUSERPRE_RABBITMQ_PORT=5672', f'TOPUSERPRE_MIN_REVIEWS={users_min_reviews}', f'TOPUSERPRE_USER_FILTERS={user_filters}', f'TOPUSERPRE_LOG_LEVEL={log_level}'],
	'links': ['rabbitmq'],
	'depends_on': list(TOPUSERPRE_DEPS),
	'networks': ['testing_net']
}
config_logs('top_users_logging', service=file['services']['top_users_prettier'])

for idx in range(0, user_filters):
	container_name = f'user_filter{idx}'
	services += [container_name]
	USERAGG_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'user_filter:latest',
		'entrypoint': '/filter',
		'restart': 'on-failure',
		'environment': [f'USERFIL_WORKERS_POOL={common_pool_size}', f'USERFIL_LOG_BULK_RATE={log_bulk_rate}', f'USERFIL_INSTANCE={idx}', 'USERFIL_RABBITMQ_IP=rabbitmq', 'USERFIL_RABBITMQ_PORT=5672', f'USERFIL_MIN_REVIEWS={users_min_reviews}', f'USERFIL_USER_AGGREGATORS={user_aggregators}', f'USERFIL_STARS_JOINERS={bestuser_joiners}', f'USERFIL_LOG_LEVEL={log_level}'],
		'links': ['rabbitmq'],
		'depends_on': list(USERFIL_DEPS),
		'networks': ['testing_net']
	}
	config_logs('top_users_logging', 'best_users_logging', service=file['services'][container_name])

for idx in range(0, user_aggregators):
	container_name = f'user_aggregator{idx}'
	services += [container_name]
	USERMAP_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'user_aggregator:latest',
		'entrypoint': '/aggregator',
		'restart': 'on-failure',
		'environment': [f'USERAGG_WORKERS_POOL={common_pool_size}', f'USERAGG_LOG_BULK_RATE={log_bulk_rate}', f'USERAGG_INSTANCE={idx}', 'USERAGG_RABBITMQ_IP=rabbitmq', 'USERAGG_RABBITMQ_PORT=5672', f'USERAGG_INPUT_TOPIC={idx}', f'USERAGG_USER_MAPPERS={user_mappers}', f'USERAGG_USER_FILTERS={user_filters}', f'USERAGG_OUTPUT_BULK_SIZE={useragg_bulk_size}', f'USERAGG_LOG_LEVEL={log_level}'],
		'links': ['rabbitmq'],
		'depends_on': list(USERAGG_DEPS),
		'networks': ['testing_net']
	}
	config_logs('top_users_logging', 'best_users_logging', 'bot_users_logging', service=file['services'][container_name])

for idx in range(0, user_mappers):
	container_name = f'user_mapper{idx}'
	services += [container_name]
	RVWSCA_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'user_mapper:latest',
		'entrypoint': '/mapper',
		'restart': 'on-failure',
		'environment': [f'USERMAP_WORKERS_POOL={common_pool_size}', f'USERMAP_LOG_BULK_RATE={log_bulk_rate}', f'USERMAP_INSTANCE={idx}', 'USERMAP_RABBITMQ_IP=rabbitmq', 'USERMAP_RABBITMQ_PORT=5672', f'USERMAP_REVIEWS_INPUTS={reviews_inputs}', f'USERMAP_USER_AGGREGATORS={user_aggregators}', f'USERMAP_LOG_LEVEL={log_level}'],
		'links': ['rabbitmq'],
		'depends_on': list(USERMAP_DEPS),
		'networks': ['testing_net']
	}
	config_logs('top_users_logging', 'best_users_logging', 'bot_users_logging', service=file['services'][container_name])

#### VOLUMES
file['volumes'] = {
	'business_dataset': {
		'driver': 'local',
		'driver_opts': {
			'type': 'none',
			'device': '$PWD/data/business',
			'o': 'bind'
		}
	}
}

#### NETWORK
file['networks'] = {
	'testing_net': {
		'ipam': {
			'driver': 'default', 
			'config': [
				{'subnet': '172.25.125.0/24'}
			]
		}
	}
}

with open('docker-compose-dev.yaml', 'w') as outfile:
    yaml.dump(file, outfile, default_flow_style=False)
